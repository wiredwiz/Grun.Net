<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- Graph Throttling Control Settings -->
    <!-- Minimum number of parse tree nodes that must occur before throttling will begin -->
    <add key="NodeThresholdCountForThrottling" value="150"/>
    <!-- Once throttling kicks in, this is the number of milliseconds per node to delay between render cycles -->
    <add key="MillisecondsToDelayPerNodeWhenThrottling" value="2"/>
    <!-- The maximum number of milliseconds to delay between rendering cycles when we are throttling with short delays -->
    <add key="MaximumRenderShortDelay" value="1000"/>
    <!-- Once we begin throttling with short delays, render instructions will begin to queue up between render cycles.  The quicker someone
    types (and thus changes the source code), the more instructions will queue up.  This setting determines the minimum number of instructions
    that must get queued up between two render cycles before "long delay" throttling kicks in.  Once "long delay" throttling kicks in, all
    render cycles are suspended until the source text stops changing for at least a full second. -->
    <add key="MinimumRenderCountToTriggerLongDelay" value="5"/>
    <!-- If the number of graph nodes exceeds the maximum render count then the graph is simply not rendered.  After a certain point the MSAGL
    graph canvas will lock up the UI while it is busy rendering and frankly a huge graph is sort of useless.  It is better to graph subsections
    of a graph that has reached such a size.  Your CPU will also thank you. -->
    <add key="MaximumNodeRenderCount" value="500"/>
    <!-- Heuristic Syntax Highlighting Color Settings -->
    <add key="DefaultTokenColor" value="Black"/>
    <add key="DefaultTokenBackgroundColor" value="Transparent"/>
    <add key="DefaultTokenFontStyle" value="Regular"/>
    <add key="CommentTokenColor" value="ForestGreen"/>
    <add key="CommentTokenBackgroundColor" value="Transparent"/>
    <add key="CommentTokenFontStyle" value="Italics"/>
    <add key="KeywordTokenColor" value="Blue"/>
    <add key="KeywordTokenBackgroundColor" value="Transparent"/>
    <add key="KeywordTokenFontStyle" value="Regular"/>
    <add key="LiteralTokenColor" value="Crimson"/>
    <add key="LiteralTokenBackgroundColor" value="Transparent"/>
    <add key="LiteralTokenFontStyle" value="Regular"/>
    <!-- Graph Node Color Settings -->
    <add key="GraphNodeBorderColor" value="Black"/>
    <add key="GraphNodeTextColor" value="Black"/>
    <add key="GraphNodeBackgroundColor" value="LightBlue"/>
    <!-- Graph Node Behavior Settings -->
    <add key="UseRuleLabelNamesForGraphNodes" value="True"/>
    <!-- Editor Settings -->
    <!-- NOTE: The editor only supports monospaced fonts.  Any other font choice will revert to Courier New. -->
    <add key="EditorFontFamily" value="Courier New"/>
    <add key="EditorFontSize" value="8"/>
    <add key="EditorTextColor" value="Black"/>
    <add key="EditorBackgroundColor" value="White"/>
    <add key="EditorCaretColor" value="Black"/>
    <add key="EditorLineNumberColor" value="Teal"/>
    <add key="EditorCurrentLineColor" value="Transparent"/>
    <add key="EditorWordWrap" value="False"/>
    <add key="EditorWordWrapIndent" value="0"/>
    <add key="EditorAutoIndent" value="False"/>
    <add key="EditorAutoBrackets" value="False"/>
    <add key="EditorTabLength" value="2"/>
    <!-- Parser Message Font Settings -->
    <add key="ParserMessageFontFamily" value="Microsoft Sans Serif"/>
    <add key="ParserMessageFontSize" value="8.25"/>
  </appSettings>
</configuration>